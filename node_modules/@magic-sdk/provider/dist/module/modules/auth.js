var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { MagicPayloadMethod } from '@magic-sdk/types';
import { BaseModule } from './base-module';
import { createJsonRpcRequestPayload } from '../core/json-rpc';
import { SDKEnvironment } from '../core/sdk-environment';
var AuthModule = /** @class */ (function (_super) {
    __extends(AuthModule, _super);
    function AuthModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Initiate the "magic link" login flow for a user. If the flow is successful,
     * this method will return a Decentralized ID token (with a default lifespan
     * of 15 minutes).
     */
    AuthModule.prototype.loginWithMagicLink = function (configuration) {
        var email = configuration.email, _a = configuration.showUI, showUI = _a === void 0 ? true : _a, redirectURI = configuration.redirectURI;
        var requestPayload = createJsonRpcRequestPayload(MagicPayloadMethod.LoginWithMagicLink, [
            { email: email, showUI: showUI, redirectURI: redirectURI },
        ]);
        return this.request(requestPayload);
    };
    /**
     * Log a user in with a special one-time-use credential token. This is
     * currently used during magic link flows with a configured redirect to
     * hydrate the user session at the end of the flow. If the flow is successful,
     * this method will return a Decentralized ID token (with a default lifespan
     * of 15 minutes).
     *
     * If no argument is provided, a credential is automatically parsed from
     * `window.location.search`.
     */
    AuthModule.prototype.loginWithCredential = function (credentialOrQueryString) {
        var credentialResolved = credentialOrQueryString !== null && credentialOrQueryString !== void 0 ? credentialOrQueryString : '';
        if (!credentialOrQueryString && SDKEnvironment.platform === 'web') {
            credentialResolved = window.location.search;
            // Remove the query from the redirect callback as a precaution.
            var urlWithoutQuery = window.location.origin + window.location.pathname;
            window.history.replaceState(null, '', urlWithoutQuery);
        }
        var requestPayload = createJsonRpcRequestPayload(MagicPayloadMethod.LoginWithCredential, [credentialResolved]);
        return this.request(requestPayload);
    };
    return AuthModule;
}(BaseModule));
export { AuthModule };
//# sourceMappingURL=auth.js.map