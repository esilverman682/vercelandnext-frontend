{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useState, useEffect } from \"react\";\nimport { Magic } from \"magic-sdk\";\nimport { MAGIC_PUBLIC_KEY } from \"../utils/urls\";\nimport { useRouter } from \"next/router\";\nconst AuthContext = /*#__PURE__*/createContext();\nlet magic;\nexport const AuthProvider = props => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const router = useRouter();\n  /**\n   * Log the user in\n   * @param {string} email \n   */\n\n  const loginUser = async email => {\n    try {\n      await magic.auth.loginWithMagicLink({\n        email\n      });\n      setUser({\n        email\n      });\n      router.push(\"/\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  /**\n   * Log the user out\n   */\n\n\n  const logoutUser = async () => {\n    try {\n      await magic.user.logout();\n      setUser(null);\n      router.push(\"/\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  /**\n   * If user is logged in, get data and display it\n   */\n\n\n  const checkUserLoggedIn = async () => {\n    try {\n      const isLoggedIn = await magic.user.isLoggedIn();\n\n      if (isLoggedIn) {\n        const {\n          email\n        } = await magic.user.getMetadata();\n        setUser({\n          email\n        }); //Add this just for test\n\n        const token = await getToken();\n        console.log(\"checkUserLoggedIn token\", token);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  /**\n   * Retrieve Magic Issued Bearer Token\n   * This allows User to make authenticated requests\n   */\n\n\n  const getToken = async () => {\n    try {\n      const token = await magic.user.getIdToken();\n      return token;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  /**\n   * Reload user login on app refresh\n   */\n\n\n  useEffect(() => {\n    magic = new Magic(MAGIC_PUBLIC_KEY);\n    checkUserLoggedIn();\n  }, []);\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: {\n      user,\n      logoutUser,\n      loginUser,\n      getToken\n    },\n    children: props.children\n  });\n};\nexport default AuthContext;","map":null,"metadata":{},"sourceType":"module"}